{"Protocols/OpenDoorDelegate.html#/c:@M@ClaySDK@objc(pl)OpenDoorDelegate(im)didFindLock":{"name":"didFindLock()","abstract":"<p>Lock found handler</p>","parent_name":"OpenDoorDelegate"},"Protocols/OpenDoorDelegate.html#/c:@M@ClaySDK@objc(pl)OpenDoorDelegate(im)didOpenWith:":{"name":"didOpen(with:)","abstract":"<p>Open handler</p>","parent_name":"OpenDoorDelegate"},"Protocols/OpenDoorDelegate.html#/c:@M@ClaySDK@objc(pl)OpenDoorDelegate(im)didReceiveTimeout":{"name":"didReceiveTimeout()","abstract":"<p>Timeout handler</p>","parent_name":"OpenDoorDelegate"},"Protocols/OpenDoorDelegate.html#/c:@M@ClaySDK@objc(pl)OpenDoorDelegate(im)alreadyRunning":{"name":"alreadyRunning()","abstract":"<p>MKey process already running</p>","parent_name":"OpenDoorDelegate"},"Protocols/OpenDoorDelegate.html#/c:@M@ClaySDK@objc(pl)OpenDoorDelegate(im)didReceiveBLEWithError:":{"name":"didReceiveBLE(error:)","abstract":"<p>BLE Error handler</p>","parent_name":"OpenDoorDelegate"},"Protocols/ClayDelegate.html#/c:@M@ClaySDK@objc(pl)ClayDelegate(im)didReceiveWithError:":{"name":"didReceive(error:)","abstract":"<p>Error handler</p>","parent_name":"ClayDelegate"},"Protocols/ClayDelegate.html":{"name":"ClayDelegate","abstract":"<p><code>ClayDelegate</code> is the delegate to handle feedback from the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ClaySDK.html\">ClaySDK</a></code> initialisation. Implement this delegate to handle error handling.</p>"},"Protocols/OpenDoorDelegate.html":{"name":"OpenDoorDelegate","abstract":"<p><code>OpenDoorDelegate</code> is the delegate to handle feedback from the <code>openDoor(with:delegate:)</code> method. Implement this delegate to handle error handling and feedback.</p>"},"Enums/ClayError.html#/s:7ClaySDK0A5ErrorO13invalidApiKeyyA2CmF":{"name":"invalidApiKey","abstract":"<p>Returned when the provided <code>API public key</code> is invalid</p>","parent_name":"ClayError"},"Enums/ClayError.html#/s:7ClaySDK0A5ErrorO13invalidBase64yA2CmF":{"name":"invalidBase64","abstract":"<p>Returned when an invalid BASE-64 encoded string was attempted to be decoded</p>","parent_name":"ClayError"},"Enums/ClayError.html#/s:7ClaySDK0A5ErrorO11invalidMKeyyA2CmF":{"name":"invalidMKey","abstract":"<p>Returned when the decrypted <code>Mobile Key</code> is not valid.</p>","parent_name":"ClayError"},"Enums/ClayError.html#/s:7ClaySDK0A5ErrorO17invalidMKeyFormatyA2CmF":{"name":"invalidMKeyFormat","abstract":"<p>Returned when an MKEY has an invalid format</p>","parent_name":"ClayError"},"Enums/ClayError.html#/s:7ClaySDK0A5ErrorO20invalidMKeySignatureyA2CmF":{"name":"invalidMKeySignature","abstract":"<p>Returned when the verification of an encrypted MKey fails</p>","parent_name":"ClayError"},"Enums/ClayError.html#/s:7ClaySDK0A5ErrorO21invalidMKeyEncryptionyA2CmF":{"name":"invalidMKeyEncryption","abstract":"<p>Returned when an <code>encrypted key</code> cannot be decrypted OR when the decryption of the <code>encrypted key</code> fails</p>","parent_name":"ClayError"},"Enums/ClayError.html#/s:7ClaySDK0A5ErrorO05storeC0yA2CmF":{"name":"storeError","abstract":"<p>Returned when an <code>encrypted key</code> fails to be stored in the Keychain.</p>","parent_name":"ClayError"},"Enums/ClayError.html#/s:7ClaySDK0A5ErrorO09storeLoadC0yA2CmF":{"name":"storeLoadError","abstract":"<p>Returned when a stored <code>encrypted key</code> fails to be loaded from the Keychain.</p>","parent_name":"ClayError"},"Enums/ClayError.html#/s:7ClaySDK0A5ErrorO08internalC0yA2CmF":{"name":"internalError","abstract":"<p>Internal error</p>","parent_name":"ClayError"},"Enums/ClayError.html#/s:7ClaySDK0A5ErrorO16errorDescriptionSSSgvp":{"name":"errorDescription","abstract":"<p>Detailed description for the received error</p>","parent_name":"ClayError"},"Enums/ClayError.html":{"name":"ClayError","abstract":"<p><code>ClayError</code> is the error type returned by ClaySDK. It encompasses a few different types of errors, each with"},"Classes/ClaySDK.html#/c:@M@ClaySDK@objc(cs)ClaySDK(im)initWithInstallationUID:apiKey:delegate:":{"name":"init(installationUID:apiKey:delegate:)","abstract":"<p>Initialisation</p>","parent_name":"ClaySDK"},"Classes/ClaySDK.html#/c:@M@ClaySDK@objc(cs)ClaySDK(im)getPublicKey":{"name":"getPublicKey()","abstract":"<p>Fetch the App Public Key</p>","parent_name":"ClaySDK"},"Classes/ClaySDK.html#/c:@M@ClaySDK@objc(cs)ClaySDK(im)reloadKeys":{"name":"reloadKeys()","abstract":"<p>In case delegate returned ClayError.storeLoadError or ClayError.storeError this method will try to reload keys from keychain. Example for this would be when phone is locked and keychain can not be accessed. Calling this method will reload keys if phone was unlocked in meantime.</p>","parent_name":"ClaySDK"},"Classes/ClaySDK.html#/c:@M@ClaySDK@objc(cs)ClaySDK(im)openDoorWith:delegate:":{"name":"openDoor(with:delegate:)","abstract":"<p>Open a lock with a Mobile Key</p>","parent_name":"ClaySDK"},"Classes/ClayResult.html#/c:@M@ClaySDK@objc(cs)ClayResult(im)getOpResult":{"name":"getOpResult()","abstract":"<p>Authentication operation result</p>","parent_name":"ClayResult"},"Classes/ClayResult.html":{"name":"ClayResult","abstract":"<p><code>ClayResult</code> is the result returned by the <code>openDoor(with:delegate:)</code> method</p>"},"Classes/ClaySDK.html":{"name":"ClaySDK","abstract":"<p>The main class that handles security and Mobile Key openings</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"}}